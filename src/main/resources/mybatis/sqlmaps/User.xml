<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.will.imlearntest.dao.UserDao">
    <select id="checkUser" resultType="UserPo">
        select * from user
        where email = #{email} and password = #{password}
    </select>
    <select id="friendList" resultType="Integer">
        select friendId from friendship
        where userId = #{userId} and groupName = #{groupName};
    </select>
    <select id="findUserByEmail" resultType="UserPo">
        select * from user
        where  email = #{email}
    </select>
    <select id="findUserById" resultType="UserPo">
        select * from user
        where  id = #{id}
    </select>
    <select id="getPersonalInfo" resultType="PersonalInfoPo">
        select * from personal_info
        where email = #{email}
    </select>
    <update id="updatePersonalInfo">
        update personal_info SET
        username = #{username},
        signature = #{signature},
        gender = #{gender}
        where email = #{email}
    </update>
    <update id="updateUser">
        update user SET
        username = #{username}
        where email = #{email}
    </update>
    <select id="searchUser" resultType="UserPo">
        select * from user
        where email like '%${userCondition}%' or username like '%${userCondition}%'
    </select>
    <select id="getGroupList" resultType="String">
        select groupName from groups
        where userId = #{userId}
    </select>
    <insert id="addGroup">
        insert into groups values(
        #{userId}, #{groupName})
    </insert>
    <update id="setUserStatus">
        update user SET
        status = #{status}
        where email = #{email}
    </update>
    <select id="getUnreadFriendList" resultType="UnreadMessagePo">
        select * from unread_message
        where toEmail = #{toEmail}
    </select>
    <select id="isFriend" resultType="Integer">
        select count(*) from friendship
        where userId = #{userId} and friendId = #{friendId}
    </select>
    <insert id="buildFriendship">
        insert into friendship values(
        #{userId}, #{friendId}, #{groupName})
    </insert>
    <update id="moveGroup">
        update friendship set groupName = #{groupName}
        where userId = #{userId} and friendId = #{friendId}
    </update>
    <select id="getNowGroup" resultType="String">
        select groupName from friendship
        where userId = #{userId} and friendId = #{friendId}
    </select>
    <delete id="removeGroup">
        delete from groups
        where userId = #{userId} and groupName = #{groupName}
    </delete>
    <update id="updateGroupName">
        update groups set groupName = #{newName}
        where userId = #{userId} and groupName = #{oriName}
    </update>
    <update id="updateGroupNameInFriendship">
        update friendship set groupName = #{newName}
        where userId = #{userId} and groupName = #{oriName}
    </update>
    <delete id="deleteFriend">
        delete from friendship
        where ( userId = #{userId} and friendId = #{friendId} ) OR ( userId = #{friendId} and friendId = #{userId})
    </delete>
    <insert id="register">
        insert into user(username, email, password, status) values(
        #{username}, #{email}, #{password}, #{status})
    </insert>
    <insert id="addPersonalInfo">
        insert into personal_info values(
        #{username}, #{gender}, #{email}, #{signature})
    </insert>
</mapper>